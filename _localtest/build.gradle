buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath('org.hidetake:groovy-ssh:2.9.0') {
            exclude module: 'groovy-all'
        }
        classpath group: "jaci.gradle", name: "EmbeddedTools", version: "+" 
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.9'
}

apply plugin: "java"
apply plugin: "cpp"
apply plugin: "c"
apply plugin: "jaci.gradle.EmbeddedTools"

import jaci.gradle.deploy.*
import jaci.gradle.nativedeps.CombinedNativeLib
import jaci.gradle.nativedeps.NativeLib
import jaci.gradle.toolchains.*

repositories.maven { repo ->
    repo.name = "WPI"
    repo.url = "http://first.wpi.edu/FRC/roborio/maven/release"
}

deploy {
    targets {
        target('roborio') {
            addresses << "roborio-5333-frc.local" << "10.53.33.2" << "172.22.11.2"
            user = 'admin'
            directory = '/home/lvuser'
        }
    }
    artifacts {
        fileArtifact('myFileArtifact') {
            predeploy << { execute 'echo \$(pwd)' }
            file = file('myfile.dat')
            filename = "test"
            postdeploy << { execute 'cat test.txt' }
        }
        javaArtifact('myJavaArtifact') {
            files = project.tasks.jar.outputs.files
            directory = 'myjavadir'
            jar = 'jar'
        }
        nativeArtifact('myNativeArtifact') {
            targetPlatform = 'roborio'
            component = 'my_program'
            after('myFileArtifact')
        }

        nativeLibraryArtifact('wpilib') {
            directory = '/usr/local/frc/lib'
        }

        all {
            targets << 'roborio'
        }
    }
}

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

model {
    libraries {
        wpilibc(NativeLib) {
            maven "edu.wpi.first.wpilibc:athena:2017.3.1"
            libraryNames = ['wpi']
        }
        hal(NativeLib) {
            maven "edu.wpi.first.wpilib:hal:2017.3.1"
            libraryMatchers = ["**/libHALAthena.so"]
        }
        ntcore(NativeLib) {
            maven "edu.wpi.first.wpilib.networktables.cpp:NetworkTables:3.1.7:arm@zip"
            libraryMatchers = ["**/libntcore.so"]
        }
        wpiutil(NativeLib) {
            maven "edu.wpi.first.wpilib:wpiutil:1.0.2:arm@zip"
            libraryMatchers = ["**/libwpiutil.so"]
        }
        cscore(NativeLib) {
            maven "edu.wpi.cscore.java:cscore:1.0.2:athena-uberzip@zip"
            libraryMatchers = ["**/libopencv*.so.3.1", "**/libcscore.so"]
        }

        wpilib(CombinedNativeLib) {
            targetPlatform = 'roborio'
            libs << "wpilibc" << "hal" << "ntcore" << "wpiutil" << "cscore"
        }

        withType(NativeLib) {
            targetPlatform = 'roborio'

            headerDirs = ["include"]
            staticMatchers = ["**/*.a"]
            sharedMatchers = ["**/libHALAthena.so",
                              "**/libopencv*.so.3.1",
                              "**/libcscore.so",
                              "**/libwpilibc.so",
                              "**/libntcore.so",
                              "**/libwpiutil.so"]
        }
    }

    platforms {
        'any-32' { architecture "x86" }
        'any-64' { architecture "x86_64" }
        roborio { operatingSystem 'linux'; architecture 'arm' }
    }

    toolChains {
        roborioGcc(CrossGcc) {
            target('roborio') {
                defineTools(it, "arm-frc-linux-gnueabi-", '')
                cppCompiler.withArguments { a -> a << '-std=c++11' }
                linker.withArguments { a -> a << '-std=c++11' }
            }
            path '/Users/jaci/.gradle/gradlerio/toolchains/bin'
        }
        gcc(Gcc) { }
        visualCpp(VisualCpp) { }
        clang(Clang) { }
    }

    components {
        my_other_program(NativeLibrarySpec) {
//            targetPlatform "any-32"
//            targetPlatform "any-64"
//            targetPlatform "roborio"

            sources.cpp {
                source.srcDirs "src_c_lib"
            }
        }
        my_program(NativeExecutableSpec) {
            targetPlatform "roborio"

            sources.cpp {
                source.srcDirs "src_c"
                lib library: "wpilib"
            }
        }
    }
}

task testMe() {
    doLast {
        println project.tasks.jar.class.superclass
    }
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}
